---
import { cn } from "../lib/utils";
import { Image } from 'astro:assets';

// Define the types for carousel images
interface CarouselImage {
  src: string | ImageMetadata;
  alt: string;
  title?: string;
  description?: string;
}

// Define the props interface
interface Props {
  carouselImages?: CarouselImage[];
  heroDesktopUrl?: string;
  heroMobileUrl?: string;
}

// Get props with defaults
const { 
  carouselImages = [],
  heroDesktopUrl,
  heroMobileUrl
} = Astro.props;

// Define slide content for each slide
const slideContent = [
  {
    title: "Consultanță gratuită",
    description: "Beneficiază de consultanță profesională fără costuri suplimentare. Expertiza noastră la dispoziția ta pentru alegerea mașinii ideale."
  },
  {
    title: "Factură fiscală",
    description: "Toate tranzacțiile sunt însoțite de factură fiscală, asigurând legalitatea și transparența completă a procesului de achiziție."
  },
  {
    title: "TVA deductibil",
    description: "Companiile pot beneficia de avantajele fiscale ale TVA-ului deductibil. Economisește și optimizează costurile afacerii tale."
  }
];

// Determine if we're using the carousel images or static hero images
const images = carouselImages.length > 0 ? carouselImages : [
  { 
    src: heroDesktopUrl || '/images/hero-default.jpg', 
    alt: "Default hero image"
  }
];
---

<section class="relative h-screen overflow-hidden">
  <!-- Carousel Container with simplified structure -->
  <div id="hero-carousel" class="relative h-full overflow-hidden">
    <div class="carousel-container h-full flex">
      {images.map((img, index) => (
        <div class="carousel-slide relative w-full h-full flex-shrink-0">
          {typeof img.src === 'string' ? (
            <div 
              class="absolute inset-0 bg-cover bg-center bg-no-repeat animate-fade-in" 
              style={`background-image: url(${img.src})`}
              aria-label={img.alt}
            ></div>
          ) : (
            <Image 
              src={img.src}
              alt={img.alt}
              width={1920}
              height={1080}
              format="webp"
              quality={80}
              class="object-cover w-full h-full absolute inset-0 animate-fade-in"
            />
          )}
          <!-- Overlay -->
          <div class="absolute inset-0 bg-black/50"></div>
        </div>
      ))}
    </div>
  </div>
  
  <!-- Content -->
  <div class="absolute top-0 left-0 right-0 bottom-0 z-10 flex items-center">
    <div class="container mx-auto px-4 md:px-6">
      <div class="max-w-3xl mx-auto text-center text-white">
        <h1 id="slide-title" class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 animate-slide-up">
          {slideContent[0].title}
        </h1>
        <p id="slide-description" class="text-lg md:text-xl text-gray-200 mb-8 animate-slide-up animation-delay-100">
          {slideContent[0].description}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center animate-slide-up animation-delay-200">
          <button 
            onclick="window.scrollToForm && window.scrollToForm()"
            class="bg-primary text-white px-6 py-3 rounded-full font-medium hover:bg-primary/90 transition-colors inline-flex items-center justify-center"
          >
            Solicită Consultanță Gratuită
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 ml-2"><polyline points="9 18 15 12 9 6"></polyline></svg>
          </button>
          <a 
            href="/about" 
            class="bg-white/10 backdrop-blur-sm border border-white/20 text-white px-6 py-3 rounded-full font-medium hover:bg-white/20 transition-colors inline-flex items-center justify-center"
          >
            Află Mai Multe
          </a>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Carousel Control Buttons -->
  <button id="carousel-prev" class="absolute left-4 top-1/2 -translate-y-1/2 z-20 bg-black/40 hover:bg-black/60 text-white rounded-full p-3 focus:outline-none transition-all duration-300 hover:scale-110">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6"><polyline points="15 18 9 12 15 6"></polyline></svg>
    <span class="sr-only">Previous</span>
  </button>
  <button id="carousel-next" class="absolute right-4 top-1/2 -translate-y-1/2 z-20 bg-black/40 hover:bg-black/60 text-white rounded-full p-3 focus:outline-none transition-all duration-300 hover:scale-110">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6"><polyline points="9 18 15 12 9 6"></polyline></svg>
    <span class="sr-only">Next</span>
  </button>
  
  <!-- Dots Navigation -->
  <div class="absolute bottom-8 left-0 right-0 z-10">
    <div class="container mx-auto px-4">
      <div class="flex justify-center">
        <div id="carousel-dots" class="flex space-x-2">
          {images.map((_, i) => (
            <button data-index={i} class={`carousel-dot w-3 h-3 rounded-full ${i === 0 ? 'bg-white' : 'bg-white/50'}`}></button>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script is:inline>
  // Simple carousel implementation
  document.addEventListener('DOMContentLoaded', () => {
    // Get all carousel elements
    const carouselElement = document.getElementById('hero-carousel');
    const slides = Array.from(document.querySelectorAll('.carousel-slide'));
    const dots = Array.from(document.querySelectorAll('.carousel-dot'));
    const titleElement = document.getElementById('slide-title');
    const descriptionElement = document.getElementById('slide-description');
    const prevButton = document.getElementById('carousel-prev');
    const nextButton = document.getElementById('carousel-next');
    
    if (!carouselElement || slides.length === 0) {
      console.error('Carousel elements not found');
      return;
    }
    
    // Setup variables
    let currentIndex = 0;
    let autoplayTimer = null;
    
    const slideContent = [
      {
        title: "Consultanță gratuită",
        description: "Beneficiază de consultanță profesională fără costuri suplimentare. Expertiza noastră la dispoziția ta pentru alegerea mașinii ideale."
      },
      {
        title: "Factură fiscală",
        description: "Toate tranzacțiile sunt însoțite de factură fiscală, asigurând legalitatea și transparența completă a procesului de achiziție."
      },
      {
        title: "TVA deductibil",
        description: "Companiile pot beneficia de avantajele fiscale ale TVA-ului deductibil. Economisește și optimizează costurile afacerii tale."
      }
    ];
    
    // Set initial slide styles
    slides.forEach((slide, index) => {
      slide.style.transition = 'transform 0.5s ease-in-out';
      slide.style.position = 'absolute';
      slide.style.left = '0';
      slide.style.top = '0';
      slide.style.width = '100%';
      slide.style.height = '100%';
      slide.style.transform = `translateX(${(index - currentIndex) * 100}%)`;
    });
    
    // Function to go to a specific slide
    function goToSlide(index) {
      // Ensure index is valid (loop around if needed)
      if (index < 0) index = slides.length - 1;
      if (index >= slides.length) index = 0;
      
      currentIndex = index;
      
      // Move all slides
      slides.forEach((slide, i) => {
        slide.style.transform = `translateX(${(i - currentIndex) * 100}%)`;
      });
      
      // Update dots
      dots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.remove('bg-white/50');
          dot.classList.add('bg-white');
        } else {
          dot.classList.remove('bg-white');
          dot.classList.add('bg-white/50');
        }
      });
      
      // Update content
      updateContent();
      
      // Reset autoplay
      resetAutoplay();
    }
    
    // Set up dot navigation
    dots.forEach((dot, i) => {
      dot.addEventListener('click', function() {
        goToSlide(i);
      });
    });
    
    // Set up prev/next buttons
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        goToSlide(currentIndex - 1);
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', function() {
        goToSlide(currentIndex + 1);
      });
    }
    
    // Start autoplay
    function startAutoplay() {
      autoplayTimer = window.setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 6000);
    }
    
    function resetAutoplay() {
      if (autoplayTimer) {
        clearInterval(autoplayTimer);
        startAutoplay();
      }
    }
    
    function updateContent() {
      if (titleElement && descriptionElement && currentIndex < slideContent.length) {
        // Add exit animation
        titleElement.classList.remove('animate-slide-up');
        descriptionElement.classList.remove('animate-slide-up');
        
        // Force reflow
        void titleElement.offsetWidth;
        
        // Update content
        titleElement.textContent = slideContent[currentIndex].title;
        descriptionElement.textContent = slideContent[currentIndex].description;
        
        // Add entrance animation
        titleElement.classList.add('animate-slide-up');
        descriptionElement.classList.add('animate-slide-up');
      }
    }
    
    // Initialize first slide and start autoplay
    goToSlide(0);
    startAutoplay();
  });
</script> 