---
import { cn } from "../lib/utils";

// Define the types for carousel images
interface CarouselImage {
  src: string;
  alt: string;
  title?: string;
  description?: string;
}

// Define the props interface
interface Props {
  carouselImages?: CarouselImage[];
  heroDesktopUrl?: string;
  heroMobileUrl?: string;
}

// Get props with defaults
const { 
  carouselImages = [],
  heroDesktopUrl,
  heroMobileUrl
} = Astro.props;

// Define slide content for each slide
const slideContent = [
  {
    title: "Servicii premium de consultanță auto",
    description: "Expertiza noastră, mașina visurilor tale. Spune-ne ce îți dorești, și noi îți găsim mașina perfectă."
  },
  {
    title: "Consultanță auto personalizată",
    description: "Eliminăm stresul achiziției. Verificăm istoricul mașinii, negociem prețul și te ghidăm în tot procesul."
  },
  {
    title: "Mașini premium verificate",
    description: "Acces la cele mai bune oferte de pe piață. Alegem doar vehicule cu istoric transparent și documentație completă."
  }
];

// If carouselImages is empty, use the legacy props to create a fallback array
const images = carouselImages.length > 0
  ? carouselImages
  : [
      { src: heroDesktopUrl || '/src/assets/car3.jpg', alt: "Luxury car" },
      { src: heroMobileUrl || '/src/assets/car1.jpg', alt: "Premium car" },
      { src: '/src/assets/car2.jpg', alt: "Executive car" }
    ];
---

<section class="relative min-h-screen flex items-center">
  <!-- Background overlay -->
  <div class="absolute inset-0 bg-gradient-to-b from-black/70 to-black/40 z-10"></div>
  
  <!-- Carousel -->
  <div class="absolute inset-0 bg-neutral-900 z-0">
    <div class="embla h-full w-full overflow-hidden">
      <div class="embla__container flex h-full">
        {images.map((img: CarouselImage, index: number) => (
          <div 
            class="embla__slide flex-full h-full w-full flex-shrink-0"
            style={{ 
              flex: '0 0 100%',
              backgroundImage: `url(${img.src})`,
              backgroundPosition: "center",
              backgroundSize: "cover"
            }}
            aria-label={img.alt}
            data-index={index}
          />
        ))}
      </div>
    </div>
  </div>

  <!-- Carousel controls -->
  <button 
    class="embla__prev absolute left-4 md:left-8 top-1/2 -translate-y-1/2 z-30 bg-white/25 hover:bg-white/50 text-white rounded-full p-3 md:p-4 transition-all duration-300 hover:scale-110 shadow-lg cursor-pointer border-2 border-white/30 hidden md:block"
    aria-label="Previous slide"
    type="button"
  >
    <!-- ChevronLeft icon -->
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6 md:h-8 md:w-8"><polyline points="15 18 9 12 15 6"></polyline></svg>
  </button>
  
  <button 
    class="embla__next absolute right-4 md:right-8 top-1/2 -translate-y-1/2 z-30 bg-white/25 hover:bg-white/50 text-white rounded-full p-3 md:p-4 transition-all duration-300 hover:scale-110 shadow-lg cursor-pointer border-2 border-white/30 hidden md:block"
    aria-label="Next slide"
    type="button"
  >
    <!-- ChevronRight icon -->
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6 md:h-8 md:w-8"><polyline points="9 18 15 12 9 6"></polyline></svg>
  </button>

  <!-- Dots indicator -->
  <div class="embla__dots absolute bottom-6 left-1/2 -translate-x-1/2 z-30 flex gap-3">
    {images.map((_: CarouselImage, index: number) => (
      <button
        class="embla__dot w-3 h-3 md:w-4 md:h-4 rounded-full transition-all shadow-md cursor-pointer border border-white/50 bg-white/40 hover:bg-white/70"
        type="button"
        data-index={index}
        aria-label={`Go to slide ${index + 1}`}
      />
    ))}
  </div>
  
  <!-- Content -->
  <div class="container mx-auto px-4 z-20 pt-24 pb-16 md:py-0">
    <div class="md:max-w-[600px] lg:max-w-[700px]">
      <h1 id="slide-title" class="text-3xl md:text-5xl lg:text-6xl font-bold text-white mb-4 animate-slide-up">
        {slideContent[0].title}
      </h1>
      <p id="slide-description" class="text-lg md:text-xl text-gray-200 mb-8 animate-fade-in">
        {slideContent[0].description}
      </p>
      <div class="flex flex-col sm:flex-row gap-4 animate-slide-up" style="animation-delay: 0.2s;">
        <button
          id="consult-button"
          class="inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-11 px-8 text-base py-2 rounded-full font-medium"
        >
          Consultanță Gratuită
        </button>
        <a 
          href="/services"
          class="inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-white bg-white text-black hover:bg-white/90 h-11 px-8 text-base py-2"
        >
          Serviciile Noastre
        </a>
      </div>
    </div>
  </div>
</section>

<!-- Import Embla Carousel script -->
<script>
  import EmblaCarousel from 'embla-carousel';
  
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize carousel
    const emblaNode = document.querySelector('.embla');
    const slideContent = [
      {
        title: "Servicii premium de consultanță auto",
        description: "Expertiza noastră, mașina visurilor tale. Spune-ne ce îți dorești, și noi îți găsim mașina perfectă."
      },
      {
        title: "Consultanță auto personalizată",
        description: "Eliminăm stresul achiziției. Verificăm istoricul mașinii, negociem prețul și te ghidăm în tot procesul."
      },
      {
        title: "Mașini premium verificate",
        description: "Acces la cele mai bune oferte de pe piață. Alegem doar vehicule cu istoric transparent și documentație completă."
      }
    ];
    
    if (!emblaNode) return;
    
    const emblaOptions = { loop: true };
    const embla = EmblaCarousel(emblaNode, emblaOptions);
    const prevBtn = document.querySelector('.embla__prev');
    const nextBtn = document.querySelector('.embla__next');
    const dotsNode = document.querySelector('.embla__dots');
    const slideTitle = document.getElementById('slide-title');
    const slideDescription = document.getElementById('slide-description');
    const consultButton = document.getElementById('consult-button');
    
    // Handle content updates on slide change
    const updateContent = () => {
      const currentIndex = embla.selectedScrollSnap();
      const currentSlide = slideContent[currentIndex % slideContent.length];
      
      if (slideTitle && slideDescription) {
        slideTitle.textContent = currentSlide.title;
        slideDescription.textContent = currentSlide.description;
      }
      
      // Update active dot
      const dots = document.querySelectorAll('.embla__dot');
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-white', 'scale-125');
          dot.classList.remove('bg-white/40');
        } else {
          dot.classList.remove('bg-white', 'scale-125');
          dot.classList.add('bg-white/40');
        }
      });
    };
    
    // Set up event listeners
    if (prevBtn) {
      prevBtn.addEventListener('click', () => embla.scrollPrev());
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => embla.scrollNext());
    }
    
    // Set up dots
    if (dotsNode) {
      const dots = document.querySelectorAll('.embla__dot');
      dots.forEach((dot) => {
        dot.addEventListener('click', () => {
          const index = parseInt(dot.getAttribute('data-index') || '0');
          embla.scrollTo(index);
        });
      });
    }
    
    // Set up consultation button
    if (consultButton) {
      consultButton.addEventListener('click', () => {
        const formSection = document.getElementById('form-section');
        if (formSection) {
          formSection.scrollIntoView({ behavior: 'smooth' });
        }
      });
    }
    
    // Set up auto-scroll
    const autoplay = setInterval(() => {
      if (embla.canScrollNext()) {
        embla.scrollNext();
      } else {
        embla.scrollTo(0);
      }
    }, 5000);
    
    // Register event handlers
    embla.on('select', updateContent);
    embla.on('init', updateContent);
    
    // Update content initially
    updateContent();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (autoplay) {
        clearInterval(autoplay);
      }
    });
  });
</script> 