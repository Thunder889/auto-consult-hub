---
import { cn } from '../lib/utils';
import carsData from '../data/cars.json';
import CarDetailsDialog from './CarDetailsDialog';

// Import car images directly with proper typing
const carImages: Record<number, string> = {
  1: '/images/cars/products/WWPassat.jpg',
  2: '/images/cars/products/PassatAlltrack.jpg',
  3: '/images/cars/products/FordFocus.jpg'
};

// Extract type to help with TypeScript inference in Astro
type Car = {
  id: number;
  title: string;
  year: number;
  price: string;
  mileage: string;
  location: string;
  image: string;
  description: string;
  externalLink: string;
  fullDetails: {
    engine: string;
    power: string;
    transmission: string;
    drive: string;
    fuel: string;
    color: string;
    features: string[];
  }
}

interface Props {
  fullPage?: boolean;
}

const { fullPage = false } = Astro.props;
const { cars } = carsData;

// Function to get the image src, with fallback in case the image is not found
function getImageSrc(car: Car): string {
  // First check if we have a direct mapping for this car ID
  if (carImages[car.id]) {
    return carImages[car.id];
  }
  // Otherwise use the image path from the car data
  return car.image;
}
---

<section class:list={["section-padding bg-white", { "py-0": fullPage }]}>
  <div class="container mx-auto px-4 md:px-6">
    {!fullPage && (
      <div class="flex flex-col md:flex-row justify-between items-start md:items-end mb-12 animate-slide-up">
        <div class="max-w-2xl mb-6 md:mb-0">
          <h2 class="text-3xl md:text-4xl font-bold text-primary tracking-tight mb-4">
            Mașini Disponibile
          </h2>
          <p class="text-muted-foreground text-lg">
            Explorați selecția noastră de mașini premium disponibile acum, fiecare cu istoric verificat, documentație completă și valoare excepțională.
          </p>
        </div>
        
        <a href="/cars" class="inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 group">
          Vezi Toate Mașinile
          <!-- Arrow Right SVG -->
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1"><path d="M5 12h14"></path><path d="m12 5 7 7-7 7"></path></svg>
        </a>
      </div>
    )}
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 animate-scale-in">
      {cars.map((car: Car) => (
        <div class="bg-white rounded-xl overflow-hidden shadow-sm border border-gray-100 transition-all duration-300 hover:shadow-md group">
          <div class="aspect-[16/10] overflow-hidden">
            <img 
              src={getImageSrc(car)} 
              alt={car.title} 
              class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
              loading="lazy"
              width="600"
              height="375"
            />
          </div>
          
          <div class="p-6">
            <div class="flex justify-between items-start mb-2">
              <h3 class="text-xl font-semibold text-primary">{car.title}</h3>
              <span class="font-bold text-lg text-primary">{car.price}</span>
            </div>
            
            <div class="grid grid-cols-3 gap-3 mb-4">
              <!-- Year -->
              <div class="flex items-center text-sm text-muted-foreground">
                <!-- Calendar SVG -->
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1.5 h-4 w-4 text-muted-foreground"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"></rect><line x1="16" x2="16" y1="2" y2="6"></line><line x1="8" x2="8" y1="2" y2="6"></line><line x1="3" x2="21" y1="10" y2="10"></line></svg>
                {car.year}
              </div>
              
              <!-- Mileage -->
              <div class="flex items-center text-sm text-muted-foreground">
                <!-- Activity SVG -->
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1.5 h-4 w-4 text-muted-foreground"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline></svg>
                {car.mileage}
              </div>
              
              <!-- Location -->
              <div class="flex items-center text-sm text-muted-foreground">
                <!-- MapPin SVG -->
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1.5 h-4 w-4 text-muted-foreground"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path><circle cx="12" cy="10" r="3"></circle></svg>
                {car.location}
              </div>
            </div>
            
            <p class="text-muted-foreground text-sm line-clamp-2 mb-4">{car.description}</p>
            
            <div class="flex space-x-2 mt-auto">
              <!-- External link button -->
              <a 
                href={car.externalLink} 
                target="_blank" 
                rel="noopener noreferrer" 
                class="flex-1 inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3 py-2"
              >
                Vezi Anunț
                <!-- External Link SVG -->
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1.5 h-3.5 w-3.5"><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path></svg>
              </a>
              
              <!-- Details button -->
              <button 
                class="flex-1 inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-9 px-3 py-2 car-details-button"
                data-car-id={car.id.toString()}
              >
                Detalii
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <CarDetailsDialog client:idle cars={cars} />
</section>

<script>
  // Handle details button clicks
  document.addEventListener('DOMContentLoaded', () => {
    const detailButtons = document.querySelectorAll('.car-details-button');
    
    detailButtons.forEach(button => {
      button.addEventListener('click', () => {
        const carId = button.getAttribute('data-car-id');
        // Dispatch a custom event that the React component will listen for
        document.dispatchEvent(new CustomEvent('show-car-details', { 
          detail: { carId: parseInt(carId || '0', 10) }
        }));
      });
    });
  });
</script> 